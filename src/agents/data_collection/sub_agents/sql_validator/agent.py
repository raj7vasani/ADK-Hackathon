"""
Agent 3: SQL Validator Agent
Description:
    This agent receives the SQL query generated by the LLM and performs syntactic and structural
    validation. It checks for SQL syntax errors, unsupported clauses, and alignment with the
    BigQuery dialect. If the query is valid, it forwards it for execution. Otherwise, it returns
    detailed error feedback to the SQL Generation Agent to trigger a regeneration cycle.
"""

from google.adk.agents import LlmAgent
from src.connectors.bigquery_connector import fetch_data
from src.agents.data_collection.sub_agents.sql_generator.agent import sql_generator_agent
import os
from dotenv import load_dotenv
from pathlib import Path

# Load .env from project root
env_path = Path(__file__).resolve().parents[2] / ".env"
load_dotenv(dotenv_path=env_path)

FAST_LLM_MODEL = os.getenv("FAST_LLM_MODEL")

# SQL Validator Agent (LLM)
sql_validator_agent = LlmAgent(
    name="SQLValidatorAgent",
    model=FAST_LLM_MODEL,
    instruction="""
You are an expert SQL Validator.

You will receive a SQL query intended to be executed on Google BigQuery. Your job is to validate:
1. The SQL syntax (must be valid SQL).
2. The BigQuery dialect compatibility.
3. The structure of the query.

Rules:
- If the query is valid, return only: valid
- If invalid, return: invalid: <reason>

Examples:
- valid
- invalid: missing FROM clause
- invalid: WHERE clause has syntax error

Do not provide additional text or explanation.
""",
    description="Validates BigQuery SQL queries for syntax and structural correctness.",
    output_key="validation_status",
)

# Main Function: Validate, Retry (if needed), and Execute
def validate_and_execute_with_retry(user_request: str, sql_query: str):
    """
    Validates a SQL query. If invalid, triggers a retry via the SQL generator agent.
    If valid, executes it.

    Args:
        user_request (str): Original user intent/query description.
        sql_query (str): SQL generated by first run of SQL Generator Agent.

    Returns:
        Union[str, pd.DataFrame]: Final result (DataFrame or error string).
    """
    result = sql_validator_agent.run(sql_query=sql_query)
    status = result.get("validation_status", "").strip().lower()

    if status == "valid":
        return fetch_data(sql_query)

    # Retry if invalid
    retry_prompt = f"""
The following SQL query was generated but is invalid:
```sql
{sql_query}
Validation Error:
{status}

Please regenerate a corrected BigQuery SQL query that fulfills the original request:

"{user_request}"

Make sure the new SQL:

Fixes the above error
Is syntactically correct
Is compatible with BigQuery
Uses correct clauses and field references
Output only the corrected SQL.
"""
    retry_output = sql_generator_agent.run(prompt=retry_prompt)
    new_sql = retry_output.get("sql_query", "").strip()

    # Second validation
    second_validation = sql_validator_agent.run(sql_query=new_sql)
    second_status = second_validation.get("validation_status", "").strip().lower()

    if second_status == "valid":
        return fetch_data(new_sql)
    else:
        return f"Retry failed. Final error: {second_status}"
